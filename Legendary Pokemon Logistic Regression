{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":280,"sourceType":"datasetVersion","datasetId":121}],"dockerImageVersionId":30698,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Introduction\nPokémon is a beloved franchise cherished by fans of all ages that was an anime turned video game. In this fantasy world, trainers encounter a vast array of species, each with its unique attributes and strengths called Pokémon. In this analysis, we delve into a comprehensive dataset containing information on various Pokémon species, including their characteristics, attributes, and classification. Our objective is to develop a predictive model capable of discerning legendary Pokémon from their non-legendary counterparts based on a range of features.","metadata":{}},{"cell_type":"code","source":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import train_test_split\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.metrics import confusion_matrix\n\nimport warnings\nwarnings.filterwarnings('ignore')","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-09T06:20:02.501161Z","iopub.execute_input":"2024-05-09T06:20:02.501545Z","iopub.status.idle":"2024-05-09T06:20:02.513254Z","shell.execute_reply.started":"2024-05-09T06:20:02.501513Z","shell.execute_reply":"2024-05-09T06:20:02.512228Z"},"trusted":true},"execution_count":102,"outputs":[{"name":"stdout","text":"/kaggle/input/pokemon/Pokemon.csv\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Data Preparation\n\nSource: The [dataset](https://www.kaggle.com/datasets/abcsds/pokemon) is publically available on the Kaggle website, including 721 including their number, name, first and second type, and basic stats: HP, Attack, Defense, Special Attack, Special Defense, and Speed.","metadata":{}},{"cell_type":"code","source":"# Loading dataset\nPokemon = pd.read_csv('../input/pokemon/Pokemon.csv')\n\n# One-hot encoding to represent Type as binary vectors\nPokemon = pd.get_dummies(Pokemon)\nPokemon.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-09T06:20:02.578422Z","iopub.execute_input":"2024-05-09T06:20:02.578804Z","iopub.status.idle":"2024-05-09T06:20:02.608368Z","shell.execute_reply.started":"2024-05-09T06:20:02.578773Z","shell.execute_reply":"2024-05-09T06:20:02.607345Z"},"trusted":true},"execution_count":103,"outputs":[{"execution_count":103,"output_type":"execute_result","data":{"text/plain":"   #  Total  HP  Attack  Defense  Sp. Atk  Sp. Def  Speed  Generation  \\\n0  1    318  45      49       49       65       65     45           1   \n1  2    405  60      62       63       80       80     60           1   \n2  3    525  80      82       83      100      100     80           1   \n3  3    625  80     100      123      122      120     80           1   \n4  4    309  39      52       43       60       50     65           1   \n\n   Legendary  ...  Type 2_Ghost  Type 2_Grass  Type 2_Ground  Type 2_Ice  \\\n0      False  ...         False         False          False       False   \n1      False  ...         False         False          False       False   \n2      False  ...         False         False          False       False   \n3      False  ...         False         False          False       False   \n4      False  ...         False         False          False       False   \n\n   Type 2_Normal  Type 2_Poison  Type 2_Psychic  Type 2_Rock  Type 2_Steel  \\\n0          False           True           False        False         False   \n1          False           True           False        False         False   \n2          False           True           False        False         False   \n3          False           True           False        False         False   \n4          False          False           False        False         False   \n\n   Type 2_Water  \n0         False  \n1         False  \n2         False  \n3         False  \n4         False  \n\n[5 rows x 846 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>#</th>\n      <th>Total</th>\n      <th>HP</th>\n      <th>Attack</th>\n      <th>Defense</th>\n      <th>Sp. Atk</th>\n      <th>Sp. Def</th>\n      <th>Speed</th>\n      <th>Generation</th>\n      <th>Legendary</th>\n      <th>...</th>\n      <th>Type 2_Ghost</th>\n      <th>Type 2_Grass</th>\n      <th>Type 2_Ground</th>\n      <th>Type 2_Ice</th>\n      <th>Type 2_Normal</th>\n      <th>Type 2_Poison</th>\n      <th>Type 2_Psychic</th>\n      <th>Type 2_Rock</th>\n      <th>Type 2_Steel</th>\n      <th>Type 2_Water</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>318</td>\n      <td>45</td>\n      <td>49</td>\n      <td>49</td>\n      <td>65</td>\n      <td>65</td>\n      <td>45</td>\n      <td>1</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>405</td>\n      <td>60</td>\n      <td>62</td>\n      <td>63</td>\n      <td>80</td>\n      <td>80</td>\n      <td>60</td>\n      <td>1</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>525</td>\n      <td>80</td>\n      <td>82</td>\n      <td>83</td>\n      <td>100</td>\n      <td>100</td>\n      <td>80</td>\n      <td>1</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>625</td>\n      <td>80</td>\n      <td>100</td>\n      <td>123</td>\n      <td>122</td>\n      <td>120</td>\n      <td>80</td>\n      <td>1</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>309</td>\n      <td>39</td>\n      <td>52</td>\n      <td>43</td>\n      <td>60</td>\n      <td>50</td>\n      <td>65</td>\n      <td>1</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 846 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Exploratory Data Analysis","metadata":{}},{"cell_type":"code","source":"Pokemon['Legendary'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-05-09T06:20:02.627114Z","iopub.execute_input":"2024-05-09T06:20:02.627507Z","iopub.status.idle":"2024-05-09T06:20:02.635791Z","shell.execute_reply.started":"2024-05-09T06:20:02.627477Z","shell.execute_reply":"2024-05-09T06:20:02.634555Z"},"trusted":true},"execution_count":104,"outputs":[{"execution_count":104,"output_type":"execute_result","data":{"text/plain":"Legendary\nFalse    735\nTrue      65\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"sns.countplot(x = 'Legendary',data = Pokemon)","metadata":{"execution":{"iopub.status.busy":"2024-05-09T06:20:02.657944Z","iopub.execute_input":"2024-05-09T06:20:02.658870Z","iopub.status.idle":"2024-05-09T06:20:02.871607Z","shell.execute_reply.started":"2024-05-09T06:20:02.658836Z","shell.execute_reply":"2024-05-09T06:20:02.870561Z"},"trusted":true},"execution_count":105,"outputs":[{"execution_count":105,"output_type":"execute_result","data":{"text/plain":"<Axes: xlabel='Legendary', ylabel='count'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"![](http://)Thus, this dataset has 735 non-legendary (Normal) Pokemon and 65 legendary Pokemon. We have an extreme over-representation of non-legendary Pokemon so we will be under-sampling the Normal pokemon and over-sampling the Legendary pokemon to a ratio of 100:100. By oversampling to 100, we oversample an additional of just over 50% of our total count of legendary Pokemon.","metadata":{}},{"cell_type":"code","source":"# Separate data into legendary and non-legendary Pokemon\nlegendary_pokemon = Pokemon[Pokemon['Legendary'] == 1]\nnon_legendary_pokemon = Pokemon[Pokemon['Legendary'] == 0]\n\n# Undersample non-legendary Pokemon to 100 samples\nundersampled_non_legendary = non_legendary_pokemon.sample(n=100, random_state=42)\n\n# Combining the undersampled non-legendary and legendary Pokémon\nbalanced_dataset = pd.concat([undersampled_non_legendary, legendary_pokemon], ignore_index=True)\n\n# Shuffling the dataset to randomize the order of samples\nbalanced_dataset = balanced_dataset.sample(frac=1, random_state=42).reset_index(drop=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-09T06:26:24.466313Z","iopub.execute_input":"2024-05-09T06:26:24.467160Z","iopub.status.idle":"2024-05-09T06:26:24.482914Z","shell.execute_reply.started":"2024-05-09T06:26:24.467125Z","shell.execute_reply":"2024-05-09T06:26:24.481875Z"},"trusted":true},"execution_count":140,"outputs":[]},{"cell_type":"markdown","source":"We now need apply SMOTE to oversample our Legendary Pokemon to 100. We begin by splitting our data into training and testing sets.","metadata":{}},{"cell_type":"code","source":"# Identifying features\nfeatures = ['Total', 'HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed', 'Generation',\n            'Type 1_Bug', 'Type 1_Dark', 'Type 1_Dragon', 'Type 1_Electric', 'Type 1_Fairy',\n            'Type 1_Fighting', 'Type 1_Fire', 'Type 1_Flying', 'Type 1_Ghost', 'Type 1_Grass',\n            'Type 1_Ground', 'Type 1_Ice', 'Type 1_Normal', 'Type 1_Poison', 'Type 1_Psychic',\n            'Type 1_Rock', 'Type 1_Steel', 'Type 1_Water', 'Type 2_Bug', 'Type 2_Dark', 'Type 2_Dragon',\n            'Type 2_Electric', 'Type 2_Fairy', 'Type 2_Fighting', 'Type 2_Fire', 'Type 2_Flying', 'Type 2_Ghost',\n            'Type 2_Grass', 'Type 2_Ground', 'Type 2_Ice', 'Type 2_Normal', 'Type 2_Poison', 'Type 2_Psychic',\n            'Type 2_Rock', 'Type 2_Steel', 'Type 2_Water']\n\n# Separating features and target variable\nX = balanced_dataset[features]\ny = balanced_dataset['Legendary']\n\n# Splitting the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-05-09T06:26:25.514345Z","iopub.execute_input":"2024-05-09T06:26:25.514718Z","iopub.status.idle":"2024-05-09T06:26:25.525341Z","shell.execute_reply.started":"2024-05-09T06:26:25.514691Z","shell.execute_reply":"2024-05-09T06:26:25.523807Z"},"trusted":true},"execution_count":141,"outputs":[]},{"cell_type":"markdown","source":"To prevent data leakage and overfitting, we will now apply SMOTE to the training set only.","metadata":{}},{"cell_type":"code","source":"# Instantiating SMOTE\n# NOTE Sampling strategy of 1.0 will oversample miniority class to same ratio as majority class\nsm = SMOTE(random_state=42, sampling_strategy=1.0)\n\n# Resampling the training data using SMOTE\nX_train_resampled, y_train_resampled = sm.fit_resample(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-05-09T06:26:26.585052Z","iopub.execute_input":"2024-05-09T06:26:26.585461Z","iopub.status.idle":"2024-05-09T06:26:26.605192Z","shell.execute_reply.started":"2024-05-09T06:26:26.585429Z","shell.execute_reply":"2024-05-09T06:26:26.604129Z"},"trusted":true},"execution_count":142,"outputs":[]},{"cell_type":"markdown","source":"# Model Evaluation","metadata":{}},{"cell_type":"code","source":"# Instantiating Logistic Regression model\nlr = LogisticRegression(random_state=42)\n\n# Training the logistic regression model on the resampled training data\nlr.fit(X_train_resampled, y_train_resampled)\n\n# Making predictions on testing data using the trained model\npredictions = lr.predict(X_test)\n\naccuracy = accuracy_score(y_test, predictions)\nreport = classification_report(y_test, predictions)\nprint(\"Accuracy:\", accuracy)\nprint(\"Classification Report:\\n\", report)","metadata":{"execution":{"iopub.status.busy":"2024-05-09T06:26:27.508132Z","iopub.execute_input":"2024-05-09T06:26:27.508525Z","iopub.status.idle":"2024-05-09T06:26:27.548244Z","shell.execute_reply.started":"2024-05-09T06:26:27.508497Z","shell.execute_reply":"2024-05-09T06:26:27.547075Z"},"trusted":true},"execution_count":143,"outputs":[{"name":"stdout","text":"Accuracy: 0.7878787878787878\nClassification Report:\n               precision    recall  f1-score   support\n\n       False       0.80      0.84      0.82        19\n        True       0.77      0.71      0.74        14\n\n    accuracy                           0.79        33\n   macro avg       0.78      0.78      0.78        33\nweighted avg       0.79      0.79      0.79        33\n\n","output_type":"stream"}]},{"cell_type":"code","source":"# Performing 10-fold cross-validation and obtaining accuracy scores for each fold\nscores = cross_val_score(lr, X, y, cv=10)\n\n# Calculate the mean accuracy across all folds\naccuracy = scores.mean()\n\nprint(\"Accuracy Scores for Each Fold:\")\nprint(scores)\n\nprint(\"Mean Accuracy:\", accuracy)","metadata":{"execution":{"iopub.status.busy":"2024-05-09T06:26:28.513452Z","iopub.execute_input":"2024-05-09T06:26:28.513873Z","iopub.status.idle":"2024-05-09T06:26:28.724315Z","shell.execute_reply.started":"2024-05-09T06:26:28.513838Z","shell.execute_reply":"2024-05-09T06:26:28.723563Z"},"trusted":true},"execution_count":144,"outputs":[{"name":"stdout","text":"Accuracy Scores for Each Fold:\n[0.70588235 0.94117647 0.88235294 0.88235294 0.82352941 1.\n 0.875      0.8125     0.8125     0.875     ]\nMean Accuracy: 0.8610294117647058\n","output_type":"stream"}]},{"cell_type":"code","source":"cm=confusion_matrix(y_test,predictions)\nconf_matrix=pd.DataFrame(data=cm,columns=['Predicted:0','Predicted:1'],index=['Actual:0','Actual:1'])\nplt.figure(figsize = (8,5))\nsns.heatmap(conf_matrix, annot=True,fmt='d',cmap=\"YlGnBu\")","metadata":{"execution":{"iopub.status.busy":"2024-05-09T06:26:28.725587Z","iopub.execute_input":"2024-05-09T06:26:28.726495Z","iopub.status.idle":"2024-05-09T06:26:28.990938Z","shell.execute_reply.started":"2024-05-09T06:26:28.726467Z","shell.execute_reply":"2024-05-09T06:26:28.989840Z"},"trusted":true},"execution_count":145,"outputs":[{"execution_count":145,"output_type":"execute_result","data":{"text/plain":"<Axes: >"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x500 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"The confusion matrix shows 16+10 = 26 correct predictions and 4+3= 7 incorrect ones.\n\nTrue Positives: 10\n\nTrue Negatives: 16\n\nFalse Positives: 4 (Type I error)\n\nFalse Negatives: 3 ( Type II error)","metadata":{}},{"cell_type":"code","source":"# Get the coefficients (weights) of the features\nfeature_weights = lr.coef_[0]\n\n# Get the absolute values of the coefficients\nabs_feature_weights = abs(feature_weights)\n\n# Get the names of the features\nfeature_names = X_train.columns\n\n# Create a dictionary to store feature names and their corresponding absolute weights\nfeature_importance_dict = dict(zip(feature_names, abs_feature_weights))\n\n# Sort the feature importance dictionary by absolute weights (descending order)\nsorted_feature_importance = sorted(feature_importance_dict.items(), key=lambda x: x[1], reverse=True)\n\n# Print the top N features with highest absolute weights\ntop_n = 10  # Change this value to the desired number of top features\nprint(f\"Top {top_n} features by absolute weight:\")\nfor feature, importance in sorted_feature_importance[:top_n]:\n    print(f\"Feature: {feature}, Absolute Weight: {importance}\")","metadata":{"execution":{"iopub.status.busy":"2024-05-09T06:30:49.502352Z","iopub.execute_input":"2024-05-09T06:30:49.502764Z","iopub.status.idle":"2024-05-09T06:30:49.510623Z","shell.execute_reply.started":"2024-05-09T06:30:49.502738Z","shell.execute_reply":"2024-05-09T06:30:49.509523Z"},"trusted":true},"execution_count":147,"outputs":[{"name":"stdout","text":"Top 10 features by absolute weight:\nFeature: Type 1_Water, Absolute Weight: 1.9261192565328669\nFeature: Type 1_Bug, Absolute Weight: 1.3259213954301168\nFeature: Type 2_Poison, Absolute Weight: 1.2833479787971211\nFeature: Type 1_Grass, Absolute Weight: 1.2641686970599053\nFeature: Speed, Absolute Weight: 1.171688966926283\nFeature: HP, Absolute Weight: 1.1668967940679138\nFeature: Total, Absolute Weight: 1.1625911464559495\nFeature: Defense, Absolute Weight: 1.1580998042951596\nFeature: Attack, Absolute Weight: 1.1515469797446927\nFeature: Sp. Def, Absolute Weight: 1.1501044886829384\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Conclusion","metadata":{}},{"cell_type":"markdown","source":"- **Each feature or stat (Speed, Hp...) had nearly equal influence in the prediction process.**\n\n- **The model predicted with 0.79 accuracy. The model is similarly specific and sensitive.**\n\n- **Overall model could be improved with more data and potentially another algorithm.**\n\n- **Mean accuracy of approximately 0.861 across all folds of the cross-validation process**","metadata":{}}]}